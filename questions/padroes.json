{"padrao":"builder","categoria":"criacional","termos":[{"_id":{"$oid":"5b18737aad65612a6233c641"},"tipo":"classe","nome":"builder"},{"_id":{"$oid":"5b18737aad65612a6233c640"},"tipo":"metodo","nome":"build"}],"__v":0,"descricao":"Separar a construção de um objeto complexo da sua representação de modo que o mesmo processo de construção possa criar diferentes representações","imagem":"https://dzone.com/storage/rc-covers/10628-thumb.png"}
{"padrao":"factory method","categoria":"criacional","termos":[{"_id":{"$oid":"5b1873baad65612a6233c645"},"tipo":"classe","nome":"factory"},{"_id":{"$oid":"5b1873baad65612a6233c644"},"tipo":"metodo","nome":"factory"},{"_id":{"$oid":"5b1873baad65612a6233c643"},"tipo":"metodo","nome":"create"}],"__v":0,"descricao":"Definir uma interface para criar um objeto, mas deixar as subclasses decidirem que classe instanciar","imagem":"https://dzone.com/storage/rc-covers/10629-thumb.png"}
{"padrao":"prototype","categoria":"criacional","termos":[{"_id":{"$oid":"5b18740ead65612a6233c649"},"tipo":"classe","nome":"prototype"},{"_id":{"$oid":"5b18740ead65612a6233c648"},"tipo":"atributo","nome":"prototype"},{"_id":{"$oid":"5b18740ead65612a6233c647"},"tipo":"metodo","nome":"clone"}],"__v":0,"descricao":"Especificar os tipos de objetos a serem criados usando uma instância-protótipo e criar novos objetos pela cópia desse protótipo","imagem":"https://dzone.com/storage/rc-covers/10630-thumb.png"}
{"padrao":"singleton","categoria":"criacional","termos":[{"_id":{"$oid":"5b187462ad65612a6233c64e"},"tipo":"classe","nome":"singleton"},{"_id":{"$oid":"5b187462ad65612a6233c64d"},"tipo":"atributo","nome":"instance"},{"_id":{"$oid":"5b187462ad65612a6233c64c"},"tipo":"atributo","nome":"unique"},{"_id":{"$oid":"5b187462ad65612a6233c64b"},"tipo":"metodo","nome":"getInstance"}],"__v":0,"descricao":"Garantir que uma classe tenha somente uma instância e fornecer um ponto global de acesso para a mesma","imagem":"https://dzone.com/storage/rc-covers/10631-thumb.png"}
{"padrao":"adapter","categoria":"estrutural","termos":[{"_id":{"$oid":"5b187491ad65612a6233c651"},"tipo":"classe","nome":"adapter"},{"_id":{"$oid":"5b187491ad65612a6233c650"},"tipo":"atributo","nome":"adaptee"}],"__v":0,"descricao":"Converter a interface de uma classe em outra interface, esperada pelos clientes. O Adapter permite que classes com interfaces incompatíveis trabalhem em conjunto - o que, de outra forma, seria impossível","imagem":"https://dzone.com/storage/rc-covers/10620-thumb.png"}
{"padrao":"bridge","categoria":"estrutural","termos":[{"_id":{"$oid":"5b187505ad65612a6233c655"},"tipo":"classe","nome":"imp"},{"_id":{"$oid":"5b187505ad65612a6233c654"},"tipo":"classe","nome":"implementor"},{"_id":{"$oid":"5b187505ad65612a6233c653"},"tipo":"classe","nome":"impl"}],"__v":0,"descricao":"Desacoplar uma abstração da sua implementação, de modo que as duas possam variar independentemente","imagem":"https://dzone.com/storage/rc-covers/10621-thumb.png"}
{"padrao":"decorator","categoria":"estrutural","termos":[{"_id":{"$oid":"5b187572ad65612a6233c660"},"tipo":"classe","nome":"decorator"},{"_id":{"$oid":"5b187572ad65612a6233c65f"},"tipo":"classe","nome":"component"},{"_id":{"$oid":"5b187572ad65612a6233c65e"},"tipo":"atributo","nome":"decorated"}],"__v":0,"descricao":"Dinamicamente, agregar responsabilidades adicionais a um objeto. Os Decorators fornecem uma alternativa flexível ao uso de subclasses para extensão de funcionalidades","imagem":"https://dzone.com/storage/rc-covers/10623-thumb.png"}
{"padrao":"proxy","categoria":"estrutural","termos":[{"_id":{"$oid":"5b1877e67ac9e1305dbe703d"},"tipo":"classe","nome":"proxy"}],"__v":0,"descricao":"Fornece um substituto ou marcador da localização de outro objeto para controlar o acesso a esse objeto","imagem":"https://dzone.com/storage/rc-covers/10626-thumb.png"}
{"padrao":"chain","categoria":"comportamental","termos":[{"_id":{"$oid":"5b1878587ac9e1305dbe7042"},"tipo":"classe","nome":"chain"},{"_id":{"$oid":"5b1878587ac9e1305dbe7041"},"tipo":"classe","nome":"handler"},{"_id":{"$oid":"5b1878587ac9e1305dbe7040"},"tipo":"atributo","nome":"next"},{"_id":{"$oid":"5b1878587ac9e1305dbe703f"},"tipo":"atributo","nome":"successor"}],"__v":0,"descricao":"Evitar o acoplamento do remetente de uma solicitação ao seu receptor, ao dar a mais de um objeto a oportunidade de tratar a solicitação","imagem":"https://dzone.com/storage/rc-covers/10609-thumb.png"}
{"padrao":"command","categoria":"comportamental","termos":[{"_id":{"$oid":"5b1878857ac9e1305dbe7045"},"tipo":"classe","nome":"command"},{"_id":{"$oid":"5b1878857ac9e1305dbe7044"},"tipo":"metodo","nome":"execute"}],"__v":0,"descricao":"Encapsular uma solicitação como um objeto, desta forma permitindo parametrizar clientes com diferentes solicitações, enfileirar ou fazer o registro de solicitações e suportar operações que podem ser desfeitas","imagem":"https://dzone.com/storage/rc-covers/10610-thumb.png"}
{"padrao":"observer","categoria":"comportamental","termos":[{"_id":{"$oid":"5b1878d77ac9e1305dbe704c"},"tipo":"classe","nome":"observer"},{"_id":{"$oid":"5b1878d77ac9e1305dbe704b"},"tipo":"classe","nome":"listener"},{"_id":{"$oid":"5b1878d77ac9e1305dbe704a"},"tipo":"classe","nome":"subject"},{"_id":{"$oid":"5b1878d77ac9e1305dbe7049"},"tipo":"classe","nome":"observable"},{"_id":{"$oid":"5b1878d77ac9e1305dbe7048"},"tipo":"metodo","nome":"notify"},{"_id":{"$oid":"5b1878d77ac9e1305dbe7047"},"tipo":"metodo","nome":"update"}],"__v":0,"descricao":"Definir uma depêndencia um-para-muitos entre objetos, de maneira que quando um objeto muda de estado todos os seus dependentes são notificados e atualizados automaticamente","imagem":"https://dzone.com/storage/rc-covers/10615-thumb.png"}
{"padrao":"state","categoria":"comportamental","termos":[{"_id":{"$oid":"5b1878f57ac9e1305dbe704f"},"tipo":"classe","nome":"state"},{"_id":{"$oid":"5b1878f57ac9e1305dbe704e"},"tipo":"atributo","nome":"state"}],"__v":0,"descricao":"Permite a um objeto alterar seu comportamento quando o seu estado interno muda. O objeto parecerá ter mudado sua classe","imagem":"https://dzone.com/storage/rc-covers/10616-thumb.png"}
{"padrao":"strategy","categoria":"comportamental","termos":[{"_id":{"$oid":"5b18790b7ac9e1305dbe7051"},"tipo":"classe","nome":"strategy"}],"__v":0,"descricao":"Denifir uma família de algoritmos, encapsular cada uma delas e torná-las intercambiáveis. Strategy permite que o algoritmo varie independentemente dos clientes que o utilizam ","imagem":"https://dzone.com/storage/rc-covers/10617-thumb.png"}
{"padrao":"template method","categoria":"comportamental","termos":[{"_id":{"$oid":"5b18793a7ac9e1305dbe7054"},"tipo":"classe","nome":"template"},{"_id":{"$oid":"5b18793a7ac9e1305dbe7053"},"tipo":"classe","nome":"method"}],"__v":0,"descricao":"Definir o esqueleto de um algoritmo em uma operação, postergando alguns passos para as subclasses. Template Method permite que subclasses redefinam certos passos de um algoritmo sem mudar a estrutura do mesmo","imagem":"https://dzone.com/storage/rc-covers/10618-thumb.png"}
{"padrao":"visitor","categoria":"comportamental","termos":[{"_id":{"$oid":"5b1879597ac9e1305dbe7057"},"tipo":"classe","nome":"visitor"},{"_id":{"$oid":"5b1879597ac9e1305dbe7056"},"tipo":"metodo","nome":"visit"}],"__v":0,"descricao":"Representar uma operação a ser executada nos elementos de uma estrutura de objetos. Visitor permite definir uma nova operação sem mudar as classes dos elementos sobre os quais opera","imagem":"https://dzone.com/storage/rc-covers/10619-thumb.png"}
{"padrao":"composite","categoria":"estrutural","termos":[{"_id":{"$oid":"5b1949289139293fb9a93692"},"tipo":"classe","nome":"composite"}],"__v":0,"descricao":"Compor objetos em estruturas de árvore para representarem hierarquias partes-todo. Composite permite aos clientes tratarem de maneira uniforme objetos individuais e composições de objetos","imagem":"https://dzone.com/storage/rc-covers/10622-thumb.png"}